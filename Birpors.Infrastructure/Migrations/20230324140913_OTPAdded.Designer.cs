// <auto-generated />
using System;
using Birpors.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Birpors.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230324140913_OTPAdded")]
    partial class OTPAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Birpors.Domain.Entities.AppLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LogText")
                        .HasColumnType("longtext");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AppLogs");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ErrorOccurDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorText")
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.Kitchen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<byte>("KitchenStatusId")
                        .HasColumnType("tinyint unsigned");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KitchenStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Kitchens", t =>
                        {
                            t.HasComment("Mətbəxlər");
                        });
                });

            modelBuilder.Entity("Birpors.Domain.Entities.KitchenFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Kalori")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<byte>("KitchenFoodStatusId")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("KitchenId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("RatedPeopleCount")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("KitchenFoodStatusId");

                    b.HasIndex("KitchenId");

                    b.ToTable("KitchenFoods");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.KitchenFoodPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsMain")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KitchenFoodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KitchenFoodId");

                    b.ToTable("KitchenFoodPhotos");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.KitchenFoodStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("KitchenFoodStatuses");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.KitchenPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsFood")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KitchenId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("KitchenId");

                    b.ToTable("KitchenPhotos");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.KitchenStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("KitchenStatuses", t =>
                        {
                            t.HasComment("Gözləmədə , təsdiq edilib, sifariş qəbul etmir");
                        });
                });

            modelBuilder.Entity("Birpors.Domain.Entities.OTP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRegister")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MessageId")
                        .HasColumnType("longtext");

                    b.Property<string>("OneTimePassword")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OTPs");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeliverDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DeliverPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("OrderStatusId")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("PaymentTypeId")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("RatingNote")
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int>("UserAddressId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CookId");

                    b.HasIndex("UserAddressId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Id" }, "Unq_Orders_Id")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Count")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("KitchenFoodId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("KitchenFoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Jti")
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AmountMonthly")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("varchar(350)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<byte>("SubscriptionPlanStatusId")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPlanStatusId");

                    b.ToTable("SubscriptionPlans", t =>
                        {
                            t.HasComment("Abone olmaq üçün təkliflər (planlar)");
                        });
                });

            modelBuilder.Entity("Birpors.Domain.Entities.SubscriptionPlanStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlanStatuses");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.SubscriptionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte>("CommitmentType")
                        .HasColumnType("tinyint unsigned")
                        .HasComment("Ödənişi nağd yoxsa nağdsız edib.");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SubscribtionTrialEndDate")
                        .HasColumnType("datetime")
                        .HasComment("Aboneliyin Trial başlama tarixi");

                    b.Property<DateTime>("SubscriptionEndDate")
                        .HasColumnType("datetime")
                        .HasComment("Aboneliyin bitme tarixi");

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("int")
                        .HasComment("Abone üsülü (Free trial , Aylıq filan qədər və s)");

                    b.Property<DateTime>("SubscriptionStartDate")
                        .HasColumnType("datetime")
                        .HasComment("Aboneliyin başlanma tarixi");

                    b.Property<byte>("SubscriptionUserStatusId")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPlanId");

                    b.HasIndex("SubscriptionUserStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("SubscriptionUsers", t =>
                        {
                            t.HasComment("Abone olmuş Aşpazlar");
                        });
                });

            modelBuilder.Entity("Birpors.Domain.Entities.SubscriptionUserStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionUserStatuses");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("DefaultPaymentTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("DeliverDistance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("DeliverPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FinCode")
                        .HasColumnType("longtext");

                    b.Property<string>("MasterKey")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<byte>("UserRoleId")
                        .HasColumnType("tinyint unsigned")
                        .HasComment("Aşpaz , İstifadəçi");

                    b.Property<byte>("UserStatusId")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.HasIndex("UserStatusId");

                    b.ToTable("Users", t =>
                        {
                            t.HasComment("Istifadəçilər");
                        });
                });

            modelBuilder.Entity("Birpors.Domain.Entities.UserAddrese", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AddressDescription")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsMainAddress")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("longtext");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("Hansı istifadəçnin ünvanıdır");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddreses", t =>
                        {
                            t.HasComment("Istifadəçilərin ünvanları");
                        });
                });

            modelBuilder.Entity("Birpors.Domain.Entities.UserCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("CardUid")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("longtext")
                        .HasColumnName("CardUID")
                        .HasComment("Payriff tərəfindən verilən unique ID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDefaultPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<byte>("UserCardStatusId")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCardStatusId");

                    b.ToTable("UserCards", t =>
                        {
                            t.HasComment("Istifadəçilərin kartları (kartlar Payriffdən gələn unique data əsasında saxlanılacaqdır)");
                        });
                });

            modelBuilder.Entity("Birpors.Domain.Entities.UserCardStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserCardStatuses", t =>
                        {
                            t.HasComment("Istifadəçi kartları üçün statuslar");
                        });
                });

            modelBuilder.Entity("Birpors.Domain.Entities.UserDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserDeviceId")
                        .HasColumnType("longtext");

                    b.Property<int>("UserDeviceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserDeviceStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDevices");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.UserDeviceStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UserDeviceStatuses");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.UserRole", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", t =>
                        {
                            t.HasComment("Rollar");
                        });
                });

            modelBuilder.Entity("Birpors.Domain.Entities.UserStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UserStatuses", t =>
                        {
                            t.HasComment("Istifadəçiyə aid statuslar");
                        });
                });

            modelBuilder.Entity("Birpors.Domain.Entities.Kitchen", b =>
                {
                    b.HasOne("Birpors.Domain.Entities.KitchenStatus", "KitchenStatus")
                        .WithMany("Kitchens")
                        .HasForeignKey("KitchenStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_kitchens_kitchenstatuses");

                    b.HasOne("Birpors.Domain.Entities.User", "User")
                        .WithMany("Kitchens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_kitchens_users");

                    b.Navigation("KitchenStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.KitchenFood", b =>
                {
                    b.HasOne("Birpors.Domain.Entities.Category", "Category")
                        .WithMany("KitchenFoods")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("fk_kitchenfoods_categories");

                    b.HasOne("Birpors.Domain.Entities.KitchenFoodStatus", "KitchenFoodStatus")
                        .WithMany("KitchenFoods")
                        .HasForeignKey("KitchenFoodStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_kitchenfoods");

                    b.HasOne("Birpors.Domain.Entities.Kitchen", "Kitchen")
                        .WithMany("KitchenFoods")
                        .HasForeignKey("KitchenId")
                        .IsRequired()
                        .HasConstraintName("fk_kitchenfoods_kitchens");

                    b.Navigation("Category");

                    b.Navigation("Kitchen");

                    b.Navigation("KitchenFoodStatus");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.KitchenFoodPhoto", b =>
                {
                    b.HasOne("Birpors.Domain.Entities.KitchenFood", null)
                        .WithMany("KitchenFoodPhotos")
                        .HasForeignKey("KitchenFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Birpors.Domain.Entities.KitchenPhoto", b =>
                {
                    b.HasOne("Birpors.Domain.Entities.Kitchen", "Kitchen")
                        .WithMany("KitchenPhotos")
                        .HasForeignKey("KitchenId")
                        .IsRequired()
                        .HasConstraintName("fk_kitchenphotos_kitchens");

                    b.Navigation("Kitchen");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.Order", b =>
                {
                    b.HasOne("Birpors.Domain.Entities.User", "Cook")
                        .WithMany("Ordereds")
                        .HasForeignKey("CookId")
                        .HasConstraintName("FK_Orders_Users_Cook");

                    b.HasOne("Birpors.Domain.Entities.UserAddrese", "UserAddress")
                        .WithMany("Orders")
                        .HasForeignKey("UserAddressId")
                        .IsRequired()
                        .HasConstraintName("fk_orders_useraddreses");

                    b.HasOne("Birpors.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_orders_users");

                    b.Navigation("Cook");

                    b.Navigation("User");

                    b.Navigation("UserAddress");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("Birpors.Domain.Entities.KitchenFood", "KitchenFood")
                        .WithMany("OrderDetails")
                        .HasForeignKey("KitchenFoodId")
                        .IsRequired()
                        .HasConstraintName("fk_orderdetails_kitchenfoods");

                    b.HasOne("Birpors.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("fk_orderdetails_orders");

                    b.Navigation("KitchenFood");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.SubscriptionPlan", b =>
                {
                    b.HasOne("Birpors.Domain.Entities.SubscriptionPlanStatus", "SubscriptionPlanStatus")
                        .WithMany("SubscriptionPlans")
                        .HasForeignKey("SubscriptionPlanStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_subscriptionplans");

                    b.Navigation("SubscriptionPlanStatus");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.SubscriptionUser", b =>
                {
                    b.HasOne("Birpors.Domain.Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("SubscriptionUsers")
                        .HasForeignKey("SubscriptionPlanId")
                        .IsRequired()
                        .HasConstraintName("fk_subscriptionusers");

                    b.HasOne("Birpors.Domain.Entities.SubscriptionUserStatus", "SubscriptionUserStatus")
                        .WithMany("SubscriptionUsers")
                        .HasForeignKey("SubscriptionUserStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_subscriptionuserss");

                    b.HasOne("Birpors.Domain.Entities.User", "User")
                        .WithMany("SubscriptionUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_subscriptionusers_users");

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("SubscriptionUserStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.User", b =>
                {
                    b.HasOne("Birpors.Domain.Entities.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .IsRequired()
                        .HasConstraintName("fk_users_userroles");

                    b.HasOne("Birpors.Domain.Entities.UserStatus", "UserStatus")
                        .WithMany("Users")
                        .HasForeignKey("UserStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_users_userstatuses");

                    b.Navigation("UserRole");

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.UserAddrese", b =>
                {
                    b.HasOne("Birpors.Domain.Entities.User", "User")
                        .WithMany("UserAddreses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_useraddreses_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.UserCard", b =>
                {
                    b.HasOne("Birpors.Domain.Entities.UserCardStatus", "UserCardStatus")
                        .WithMany("UserCards")
                        .HasForeignKey("UserCardStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_usercards_usercardstatuses");

                    b.Navigation("UserCardStatus");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.UserDevice", b =>
                {
                    b.HasOne("Birpors.Domain.Entities.UserDeviceStatus", "UserDeviceStatus")
                        .WithMany()
                        .HasForeignKey("UserDeviceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Birpors.Domain.Entities.User", null)
                        .WithMany("UserDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDeviceStatus");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.Category", b =>
                {
                    b.Navigation("KitchenFoods");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.Kitchen", b =>
                {
                    b.Navigation("KitchenFoods");

                    b.Navigation("KitchenPhotos");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.KitchenFood", b =>
                {
                    b.Navigation("KitchenFoodPhotos");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.KitchenFoodStatus", b =>
                {
                    b.Navigation("KitchenFoods");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.KitchenStatus", b =>
                {
                    b.Navigation("Kitchens");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.SubscriptionPlan", b =>
                {
                    b.Navigation("SubscriptionUsers");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.SubscriptionPlanStatus", b =>
                {
                    b.Navigation("SubscriptionPlans");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.SubscriptionUserStatus", b =>
                {
                    b.Navigation("SubscriptionUsers");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.User", b =>
                {
                    b.Navigation("Kitchens");

                    b.Navigation("Ordereds");

                    b.Navigation("Orders");

                    b.Navigation("SubscriptionUsers");

                    b.Navigation("UserAddreses");

                    b.Navigation("UserDevices");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.UserAddrese", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.UserCardStatus", b =>
                {
                    b.Navigation("UserCards");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Birpors.Domain.Entities.UserStatus", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
